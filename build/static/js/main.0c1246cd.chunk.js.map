{"version":3,"sources":["components/Login/LoginPage.js","store/Actions/user.js","store/Actions/ActionType.js","components/Messenger/ChatHeader.js","components/Messenger/Message.js","components/Messenger/ChatHistory.js","components/Messenger/User.js","components/Messenger/ListUser.js","components/Messenger/MessageInput.js","store/Actions/message.js","components/Messenger/Messenger.js","store/Actions/auth.js","App.js","serviceWorker.js","store/reducers/user.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["LoginPage","isEmpty","this","props","auth","console","log","uid","localStorage","setItem","history","push","concat","firebase","login","provider","type","_this","react_default","a","createElement","className","style","width","margin","react_google_button_es","onClick","handleLogIn","Component","Login_LoginPage","compose","firebaseConnect","withRouter","connect","_ref","getUser","displayName","avatarUrl","star","getUserFromFirebase","id","dispatch","getState","getFirebase","onAuthStateChanged","user","priority","database","ref","once","then","snapshot","val","isStar","_snapshot$val","update","idChatWith","lastChat","_snapshot$val2","ChatHeader","_callee","item","regenerator_default","wrap","_context","prev","next","idAuth","chatHeader","updateStarUser","stop","_this2","starClass","src","height","alt","state","userReducer","Message","message","time","moment","format","parts","match","links","map","link","index","key","imgUrls","imgUrl","imgs","liClass","ChatHistory","scrollToBottom","endChat","scrollIntoView","behavior","nextProps","prevProps","prevState","idSender","idReceiver","idMessage","idx","_","values","messages","forEach","mess","chat","list","Messenger_Message","float","clear","e","data","User","onHandleOnClickUser","path","desc","status","value","online","day","lastOnline","toDate","calendar","ListUser","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","name","target","setState","defineProperty","keyword","users","idCurrent","findIndex","i","length","j","offline","starScore","Date","timeScore","sort","b","listUsers","filter","toLowerCase","indexOf","Messenger_User","placeholder","ordered","library","add","faImage","MessageInput","onHandleChooseImage","image","files","reader","FileReader","onloadend","previewImage","toConsumableArray","result","listImages","readAsDataURL","onHanleKey","keyCode","onSubmit","str","preventDefault","now","listImgs","sendMessage","updateLastChatUser","onDelete","preImgs","splice","listPreviewImgs","listPreImgs","preImg","color","onKeyDown","rows","htmlFor","react_fontawesome_index_es","icon","size","accept","file","metadata","contentType","storageRef","storage","promises","element","child","lastModified","put","Promise","all","res","getDownloadURL","imgURLs","Messenger","getItem","setStatus","params","handleLogOut","logout","Messenger_ListUser","Messenger_ChatHeader","Messenger_ChatHistory","Messenger_MessageInput","currentUser","onDisconnect","set","ServerValue","TIMESTAMP","App","BrowserRouter","Route","exact","component","withFirebase","Boolean","window","location","hostname","initialState","arguments","undefined","action","rootReducer","combineReducers","firebaseReducer","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","config","userProfile","attachAuthIsReady","firebaseStateName","store","initializeApp","reactReduxFirebase","applyMiddleware","thunk","withExtraArgument","createStore","createStoreWithFirebase","firebaseAuthIsReady","configureStore","__INITIAL_STATE__","ReactDOM","render","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWAQMA,+LAEGC,kBAAQC,KAAKC,MAAMC,QACtBC,QAAQC,IAAIJ,KAAKC,MAAMC,KAAKG,KAC5BC,aAAaC,QAAQ,YAAY,QACjCP,KAAKC,MAAMO,QAAQC,KAAnB,cAAAC,OAAsCV,KAAKC,MAAMC,KAAKG,qKAIlDL,KAAKC,MAAMU,SAASC,MAAM,CAAEC,SAAU,SAAUC,KAAM,6IAErD,IAAAC,EAAAf,KAEP,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,MAAO,CAACC,MAAO,QACtCL,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACE,OAAQ,eACrBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcC,QAAS,kBAAMT,EAAKU,0BAhBpBC,aA4BxBC,EAAeC,YACbC,4BAAkBC,IAClBC,YAAQ,SAAAC,GAAA,MAA6B,CAAE9B,KAA/B8B,EAAGrB,SAAYT,QAFzB,CAGEJ,6BCpCWmC,EAAU,SAAAD,GACnB,MAAO,CACHlB,KCLgB,WDMhBT,IAH0D2B,EAAxC3B,IAIlB6B,YAJ0DF,EAAnCE,YAKvBC,UAL0DH,EAAtBG,UAMpCC,KAN0DJ,EAAXI,OAU1CC,EAAsB,SAACC,GAAD,OAC/B,SAACC,EAAUC,EAAUC,GACjB,IAAM9B,EAAW8B,IAEjB9B,EAAST,OAAOwC,mBAAmB,SAAUC,GACzC,GAAIA,EAAM,CACN,IAAItC,EAAMsC,EAAKtC,IACXuC,EAAW,GAEfjC,EAASkC,WAAWC,IAApB,SAAApC,OAAiCL,EAAjC,cAAAK,OAAiD4B,IAAMS,KAAK,SAASC,KAAK,SAAUC,GAEhF,GADA9C,QAAQC,IAAI6C,EAASC,OACjBD,EAASC,MAAO,CAChBN,EAASO,OAASF,EAASC,MAAMC,OACjC,IAAMf,EAAOa,EAASC,MAAMC,OAE5BxC,EAASkC,WAAWC,IAApB,SAAApC,OAAiC4B,IAAMS,KAAK,SAASC,KAAK,SAAUC,GAChE9C,QAAQC,IAAI6C,EAASC,OADqD,IAAAE,EAEvCH,EAASC,MAApChB,EAFkEkB,EAElElB,YAAaC,EAFqDiB,EAErDjB,UAErBI,EAASN,EAAQ,CAAE5B,IADTiC,EACcJ,cAAaC,YAAWC,iBAIpDzB,EAAS0C,OAAT,SAAA3C,OAAyBL,EAAzB,cAAAK,OAAyC4B,GAAM,CAACgB,WAAU,GAAA5C,OAAK4B,GAAKa,QAAQ,EAAOI,SAAU,IAC7F5C,EAASkC,WAAWC,IAApB,SAAApC,OAAiCL,EAAjC,cAAAK,OAAiD4B,IAAMS,KAAK,SAASC,KAAK,SAAUC,GAC/EL,EAASO,OAASF,EAASC,MAAMC,OAClC,IAAMf,EAAOa,EAASC,MAAMC,OAE5BxC,EAASkC,WAAWC,IAApB,SAAApC,OAAiC4B,IAAMS,KAAK,SAASC,KAAK,SAAUC,GAChE9C,QAAQC,IAAI6C,EAASC,OADqD,IAAAM,EAEvCP,EAASC,MAApChB,EAFkEsB,EAElEtB,YAAaC,EAFqDqB,EAErDrB,UAErBI,EAASN,EAAQ,CAAE5B,IADTiC,EACcJ,cAAaC,YAAWC,qBExC1EqB,6MACFjC,8CAAU,SAAAkC,EAAMtB,GAAN,IAAAuB,EAAA,OAAAC,EAAA3C,EAAA4C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACAL,EAAO,CACTvB,MAAOA,EACP6B,OAAQlD,EAAKd,MAAMC,KAAKG,IACxBiD,WAAYvC,EAAKd,MAAMiE,WAAW7D,KAJhCyD,EAAAE,KAAA,EAMAjD,EAAKd,MAAMkE,eAAeR,GAN1B,OAON5C,EAAKd,MAAMoC,oBAAoBsB,EAAKL,YAP9B,wBAAAQ,EAAAM,SAAAV,EAAA1D,uIASD,IAAAqE,EAAArE,KACLG,QAAQC,IAAIJ,KAAKC,MAAMiE,YACvB,IAAII,EAAY,qBAIhB,OAHGtE,KAAKC,MAAMiE,WAAW9B,OACrBkC,EAAY,oBAIZtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKqD,IAAKvE,KAAKC,MAAMiE,WAAW/B,UAAWd,MAAQ,OAAOmD,OAAS,OAAOC,IAAI,WAC9EzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,aAAsCnB,KAAKC,MAAMiE,WAAWhC,cAGhElB,EAAAC,EAAAC,cAAA,KAAGC,UAAWmD,EAAW9C,QAAS,kBAAK6C,EAAK7C,QAAQ6C,EAAKpE,MAAMiE,WAAW9B,iBAxBjEV,aA8CVE,cAAQC,4BAAkBE,YAPjB,SAAC2C,GAErB,MAAO,CACHR,WAAYQ,EAAMC,YAClBzE,KAAMwE,EAAM/D,SAAST,OAdF,SAACqC,GACxB,MAAO,CACH4B,eAAgB,SAACR,GACbpB,EF+BkB,SAACoB,GAAD,OAC1B,SAACpB,EAAUC,EAAUC,GACAA,IACSI,WAAWC,IAApB,SAAApC,OAAiCiD,EAAKM,OAAtC,cAAAvD,OAAyDiD,EAAKL,aACpED,OAAO,CACdF,OAAQQ,EAAKvB,QEpCJ+B,CAAeR,KAE5BtB,oBAAqB,SAACC,GAClBC,EAASF,EAAoBC,QAW1BV,CAAwE6B,qCC9CjFmB,mLAEO,IAGGC,EAAY7E,KAAKC,MAAjB4E,QACA3E,EAASF,KAAKC,MAAdC,KAGJ4E,EAAOC,MAASC,OAAO,MACvBC,EAAQJ,EAAQA,QAAQK,MAAM,0BAC9BC,EAAQ,KACRF,IACAE,EAAQF,EAAMG,IAAI,SAACC,EAAMC,GACrB,OACItE,EAAAC,EAAAC,cAAA,OAAKqD,IAAKc,EAAME,IAAKD,OAIjC,IAAIE,EAAUX,EAAQY,OAClBC,EAAO,KAUX,OATIF,IACAE,EAAOF,EAAQJ,IAAI,SAACK,EAAQH,GACxB,OACItE,EAAAC,EAAAC,cAAA,OAAKqD,IAAKkB,EAAQF,IAAKD,OAM/BT,EAAQc,QAEJ3E,EAAAC,EAAAC,cAAA,MAAIC,UAAW0D,EAAQc,SACnB3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAsB2D,GAD1C,aAEQ9D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAsBjB,EAAKgC,YAA3C,KACJlB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACV0D,EAAQA,QACRa,EACAP,IAMTnE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,OAAKqD,IAAKvE,KAAKC,MAAMiE,WAAW/B,UAAWsC,IAAI,SAAStD,UAAU,oBAClEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBACXnB,KAAKC,MAAMiE,WAAWhC,aAE3BlB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAqB2D,GALzC,aAOA9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACV0D,EAAQA,QACRa,EACAP,WA1DHzD,aAwEPK,cANS,SAAC2C,GACrB,MAAO,CACHR,WAAYQ,EAAMC,cAIX5C,CAAyB6C,GCvElCgB,6MACFC,eAAiB,WACb9E,EAAK+E,QAAQC,eAAe,CAAEC,SAAU,+FAIxChG,KAAK6F,mEAEiBI,GACtBjG,KAAK6F,4DAGUK,EAAWC,GAC1BnG,KAAK6F,kDAKA,IAAAxB,EAAArE,KAMCE,EAAOF,KAAKC,MAAMC,KAElBkG,EAAWlG,EAAKG,IAChBgG,EAAarG,KAAKC,MAAMoG,WACxBC,EAAaF,EAAWC,EAAeD,EAAWC,EAAeA,EAAaD,EAEhFG,GAAO,EACXC,IAAEC,OAAOzG,KAAKC,MAAMyG,UAAUC,QAAQ,SAACC,EAAMtB,GAErCgB,IAAcE,IAAEC,OAAOG,GAAM,GAAGN,YAChCC,EAAMjB,KAId,IAAMuB,EAAOL,IAAEC,OAAOD,IAAEC,OAAOzG,KAAKC,MAAMyG,UAAUH,IAEhDO,EAAO,KAcX,OAbID,IACAC,EAAOD,EAAKzB,IAAI,SAACP,EAASS,GACtB,IAAIK,EAAU,KAKd,OAJId,EAAQuB,WAAaA,IACrBT,EAAU,YAEdd,EAAQc,QAAUA,EAEd3E,EAAAC,EAAAC,cAAC6F,EAAD,CAASxB,IAAKD,EAAOT,QAASA,EAAS3E,KAAMA,OAMrDc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UACK4F,GAEL9F,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAE4F,MAAO,OAAQC,MAAO,QAAUnE,IAAK,SAACoE,GAAQ7C,EAAKyB,QAAUoB,aA3DjExF,aAoEXE,cAAQC,0BAAgB,CAAC,aAAcE,YAH9B,SAAA2C,GAAK,MAAK,CAC9BgC,SAAUhC,EAAM/D,SAASwG,KAAKT,YAEnB9E,CAAiEgE,WCrE1EwB,6MACFC,oBAAsB,SAAChH,GACnBU,EAAKd,MAAMoC,oBAAoBhC,GAC/B,IAAIiH,EAAI,cAAA5G,OAAiBL,GACzBU,EAAKd,MAAMO,QAAQC,KAAK6G,4EAEnB,IAAAjD,EAAArE,KACC2C,EAAS3C,KAAKC,MAAd0C,KACF4E,EAAO,GACPC,EAAS,GACb,GAAI7E,EAAK8E,MAAMD,OAAOE,OAClBH,EAAO,SACPC,EAASxG,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAErB,CACD,IAAIwG,EAAM5C,IAAOpC,EAAK8E,MAAMD,OAAOI,YAC/BA,EAAa7C,IAAO4C,EAAIE,UAAUC,WACtCP,EAAI,GAAA7G,OAAMkH,GACVJ,EAASxG,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAG1B,OACIH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,OAAKqD,IAAK5B,EAAK8E,MAAMtF,UAAWsC,IAAI,WACpCzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOK,QAAS,kBAAM6C,EAAKgD,oBAAoB1E,EAAK4C,OAAO5C,EAAK8E,MAAMvF,aACrFlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEVqG,EACAD,YA7BN7F,aAgDJI,cAAWC,YALF,SAAC2C,GACrB,MAAO,CACHR,WAAYQ,EAAMC,cATC,SAACpC,GACxB,MAAO,CACHF,oBAAqB,SAAChC,GAClBkC,EAASF,EAAoBhC,OASf0B,CAA6CqF,IC/CjEW,cACF,SAAAA,EAAY9H,GAAO,IAAAc,EAAA,OAAAiH,OAAAC,EAAA,EAAAD,CAAAhI,KAAA+H,IACfhH,EAAAiH,OAAAE,EAAA,EAAAF,CAAAhI,KAAAgI,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAApI,KAAMC,KAKVoI,SAAW,SAACnB,GACR,IAAIoB,EAAOpB,EAAEqB,OAAOD,KAChBb,EAAQP,EAAEqB,OAAOd,MACrB1G,EAAKyH,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACKM,EAAOb,KARZ1G,EAAK2D,MAAQ,CACTgE,QAAS,IAHE3H,wEAcV,IAAAsD,EAAArE,KACD2I,EAAQ3I,KAAKC,MAAM0I,MAEjBC,EAAY5I,KAAKC,MAAMI,IACvBiF,EAAQkB,IAAEqC,UAAUF,EAAO,CAAEpD,IAAOqD,IACtChG,EAAW,KACf,IAAe,IAAX0C,EAAc,CACd1C,EAAW4D,IAAEC,OAAOkC,EAAMrD,GAAOmC,MAAM7E,UACvC,IAAK,IAAIkG,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIpG,EAASmG,OAAQC,IAC7BL,EAAMG,GAAGvD,MAAQ3C,EAASoG,GAAG1F,aAC7BqF,EAAMG,GAAG1G,KAAOQ,EAASoG,GAAG7F,OAC5BwF,EAAMG,GAAGvF,SAAWX,EAASoG,GAAGzF,UAKhD,IAAImE,EAAS,GACTuB,EAAU,GACd,GAAIN,EACA,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAC9BH,EAAMG,GAAGI,UAAYP,EAAMG,GAAG1G,KAAO,IAAO,IAAI+G,KAAU,EAC1DR,EAAMG,GAAGM,UAAYT,EAAMG,GAAGvF,SAAWoF,EAAMG,GAAGvF,SAAW,EACzDoF,EAAMG,GAAGrB,MAAMD,OAAOE,OACtBA,EAAOjH,KAAKkI,EAAMG,IAElBG,EAAQxI,KAAKkI,EAAMG,IAK/BpB,EAAO2B,KAAK,SAACpI,EAAGqI,GACZ,OAASA,EAAEJ,UAAYI,EAAEF,UAAcnI,EAAEiI,UAAYjI,EAAEmI,YAE3DH,EAAQI,KAAK,SAACpI,EAAGqI,GACb,OAASA,EAAEJ,UAAYI,EAAEF,UAAcnI,EAAEiI,UAAYjI,EAAEmI,YAG3DT,EAAQjB,EAAOhH,OAAOuI,GACtB9I,QAAQC,IAAIuI,GACZ,IAAIY,EAAY,GAiBhB,OAhBIZ,IACAxI,QAAQC,IAAIuI,GACe,KAAvB3I,KAAK0E,MAAMgE,UACXC,EAAQA,EAAMa,OAAO,SAAC7G,GAClB,OAA2F,IAApFA,EAAK8E,MAAMvF,YAAYuH,cAAcC,QAAQrF,EAAKK,MAAMgE,QAAQe,kBAI/EF,EAAYZ,EAAMvD,IAAI,SAACzC,EAAM2C,GACzB,OACItE,EAAAC,EAAAC,cAACyI,EAAD,CACIpE,IAAKD,EACL3C,KAAMA,OAKlB3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOJ,KAAK,OAAOwH,KAAK,UAAUb,MAAOzH,KAAK0E,MAAMgE,QAASL,SAAUrI,KAAKqI,SAAUuB,YAAY,WAClG5I,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAEjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACToI,WA/EE7H,aA4FRE,cAAQC,0BAAgB,CAAC,UAAWE,YAL3B,SAAA2C,GAAK,MAAK,CAC9BrE,IAAKqE,EAAM/D,SAAST,KAAKG,IACzBsI,MAAOjE,EAAM/D,SAASkJ,QAAQlB,SAGnB/G,CAA8DmG,sCC3F7E+B,IAAQC,IAAIC,SACNC,cACF,SAAAA,EAAYhK,GAAO,IAAAc,EAAA,OAAAiH,OAAAC,EAAA,EAAAD,CAAAhI,KAAAiK,IACflJ,EAAAiH,OAAAE,EAAA,EAAAF,CAAAhI,KAAAgI,OAAAG,EAAA,EAAAH,CAAAiC,GAAA7B,KAAApI,KAAMC,KAOVoI,SAAW,SAACnB,GACR,IAAIoB,EAAOpB,EAAEqB,OAAOD,KAChBb,EAAQP,EAAEqB,OAAOd,MACrB1G,EAAKyH,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACKM,EAAOb,KAZG1G,EAenBmJ,oBAAsB,SAAChD,GACnB,IAAIiD,EAAQjD,EAAEqB,OAAO6B,MAAM,GAEvBC,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACXJ,GACApJ,EAAKyH,SAAS,CACVgC,aAAaxC,OAAAyC,EAAA,EAAAzC,CAAKjH,EAAK2D,MAAM8F,cAAjB9J,OAAA,CAA+B2J,EAAOK,SAClDC,WAAW3C,OAAAyC,EAAA,EAAAzC,CAAKjH,EAAK2D,MAAMiG,YAAjBjK,OAAA,CAA6ByJ,OAInDE,EAAOO,cAAcT,GACrBjD,EAAEqB,OAAOd,MAAQ,MA5BF1G,EA8BnB8J,WAAa,SAAC3D,GAIV,GAHkB,KAAdA,EAAE4D,SACF/J,EAAKgK,SAAS7D,GAEA,KAAdA,EAAE4D,SAAgC,KAAd5D,EAAE4D,QAAgB,CACtC,IAAIE,EAAMjK,EAAK2D,MAAMG,QAAU,KAC/B9D,EAAKyH,SAAS,CAAE3D,QAASmG,MApCdjK,EAuCnBgK,SAAW,SAAC7D,GACRA,EAAE+D,iBACF,IAAM7E,EAAWrF,EAAKd,MAAMC,KAAKG,IAC3BgG,EAAatF,EAAKd,MAAMoG,WACxBC,EAAaF,EAAWC,EAAeD,EAAWC,EAAeA,EAAaD,EACpF,GAA2B,KAAvBrF,EAAK2D,MAAMG,SAAmD,IAAjC9D,EAAK2D,MAAMiG,WAAW5B,OAAc,CACjE,IAAMpF,EAAO,CACTkB,QAAS9D,EAAK2D,MAAMG,QACpBuB,SAAUA,EACVC,WAAYA,EACZC,UAAWA,EACXxB,KAAMqE,KAAK+B,MACXC,SAAUpK,EAAK2D,MAAMiG,YAEnBrI,EAAK,CACP8D,SAAUA,EACVC,WAAYA,GAGhBtF,EAAKd,MAAMmL,YAAYzH,GACvB5C,EAAKd,MAAMoL,mBAAmB/I,GAC9BvB,EAAKyH,SAAS,CACV3D,QAAS,GACT8F,WAAY,GACZH,aAAc,KAElBtD,EAAEqB,OAAOd,MAAQ,OAjEN1G,EAqEnBuK,SAAW,SAAChG,GACR,IAAIiG,EAAUxK,EAAK2D,MAAM8F,aACzBe,EAAQC,OAAOlG,EAAO,GACtB,IAAI6F,EAAWpK,EAAK2D,MAAMiG,WAC1BQ,EAASK,OAAOlG,EAAO,GACvBvE,EAAKyH,SAAS,CACVgC,aAAce,EACdZ,WAAYQ,IAEhBhL,QAAQC,IAAIW,EAAK2D,MAAMiG,aA5EvB5J,EAAK2D,MAAQ,CACTG,QAAS,GACT8F,WAAY,GACZH,aAAc,IALHzJ,wEAgFV,IAAAsD,EAAArE,KAIDyL,EAAkBzL,KAAK0E,MAAM8F,aAC7BkB,EAAc,KAclB,OAbID,EAAgB1C,OAAS,IACzB2C,EAAcD,EAAgBrG,IAAI,SAACuG,EAAQrG,GACvC,OACItE,EAAAC,EAAAC,cAAA,OAAKqE,IAAKD,EAAOnE,UAAU,iBACvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAM6C,EAAKiH,SAAShG,IAAQlE,MAAO,CAAEwK,MAAO,QAA7D,KACA5K,EAAAC,EAAAC,cAAA,OAAKqD,IAAKoH,SAQ1B3K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,YAAUoH,KAAK,UAAUb,MAAOzH,KAAK0E,MAAMG,QAASwD,SAAUrI,KAAKqI,SAAUwD,UAAW7L,KAAK6K,WAAYvI,GAAG,kBAAkBsH,YAAY,oBAAoBkC,KAAK,MACnK9K,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAFjB,gBAKIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SAAO6K,QAAQ,QACX/K,EAAAC,EAAAC,cAAC8K,EAAA,EAAD,CAAiBC,KAAK,QAAQC,KAAK,QAEvClL,EAAAC,EAAAC,cAAA,SAAOJ,KAAK,OAAOwB,GAAG,OAAO6J,OAAO,UAAUrJ,IAAI,eAAeuF,SAAU,SAACnB,GAAD,OAAO7C,EAAK6F,oBAAoBhD,OAE9GwE,EACD1K,EAAAC,EAAAC,cAAA,UAAQM,QAASxB,KAAK+K,UAAtB,gBAjHWrJ,aAmIZK,cANS,SAAC2C,GACrB,MAAO,CACHxE,KAAMwE,EAAM/D,SAAST,OARF,SAACqC,GACxB,MAAO,CACH6I,YAAa,SAACvG,GAAD,OAAatC,ECjIP,SAACsC,GAAD,OACvB,SAACtC,EAAUC,EAAUC,GACjBtC,QAAQC,IAAIyE,GAEZ,IAAMlE,EAAW8B,IACbsH,EAAMpJ,EAASkC,WAAWC,IAApB,YAEV,GAAI+B,EAAQsG,SAASpC,OAAS,EAAG,CAC7B,IAAIqD,EAAOvH,EAAQsG,SACfkB,EAAW,CACXC,YAAa,WAGbC,EAAa5L,EAAS6L,UAAU1J,MAChC2J,EAAW,GACfL,EAAKzF,QAAQ,SAAA+F,GACTD,EAAShM,KAAK8L,EAAWI,MAAX,UAAAjM,OAA2BgM,EAAQE,cAAnClM,OAAkDgM,EAAQpE,OAAQuE,IAAIH,EAASL,MAEjGS,QAAQC,IAAIN,GAAUzJ,KAAK,SAAAgK,GACvBP,EAAW,GACXO,EAAIrG,QAAQ,SAAA+F,GACRD,EAAShM,KAAKiM,EAAQ5J,IAAImK,oBAE9BH,QAAQC,IAAIN,GAAUzJ,KAAK,SAACkK,GACxB/M,QAAQC,IAAI8M,GACZrI,EAAQY,OAASyH,EACjBnD,EAAI4C,MAAM9H,EAAQyB,WAAW7F,KAAKoE,YAO1CkF,EAAI4C,MAAM9H,EAAQyB,WAAW7F,KAAKoE,IDgGHuG,CAAYvG,KAC/CwG,mBAAoB,SAAC/I,GAAD,OAAQC,EPzEF,SAACD,GAAD,OAC9B,SAACC,EAAUC,EAAUC,GACjB,IAAM9B,EAAW8B,IACjB9B,EAAST,OAAOwC,mBAAmB,SAAUC,GACzC,GAAIA,EAAM,CACN,IAAItC,EAAMsC,EAAKtC,IACfM,EAAS0C,OAAT,SAAA3C,OAAyBL,EAAzB,cAAAK,OAAyC4B,EAAG+D,YAAc,CAAE9C,SAAU4F,KAAK+B,QAC3EvK,EAAS0C,OAAT,SAAA3C,OAAyB4B,EAAG+D,WAA5B,cAAA3F,OAAmDL,GAAO,CAAEkD,SAAU4F,KAAK+B,YOkE9CG,CAAmB/I,OASjDP,CAA6CkI,GE9HtDkD,sMAG4C,SAAtC7M,aAAa8M,QAAQ,cACrBpN,KAAKC,MAAMO,QAAQC,KAAK,kDAKc,UAAtCH,aAAa8M,QAAQ,aACrBpN,KAAKC,MAAMO,QAAQC,KAAK,MAGxBT,KAAKC,MAAMoN,YACXrN,KAAKC,MAAMoC,oBAAoBrC,KAAKC,MAAMiF,MAAMoI,OAAOhL,4CAK3DtC,KAAKC,MAAMsN,eACXvN,KAAKC,MAAMU,SAAS6M,SACpBlN,aAAaC,QAAQ,YAAa,0CAE7B,IAAAQ,EAAAf,KAIL,OACIgB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEwK,MAAO,UAApB,aACA5K,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEwK,MAAO,UAApB,UAAuC5L,KAAKC,MAAMC,KAAKgC,cAG3DlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcC,MAAO,CAAEoD,OAAQ,OAAQnD,MAAO,QAAUG,QAAS,kBAAMT,EAAKwM,iBAC1FvM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcmB,GAAG,eAE5BtB,EAAAC,EAAAC,cAACuM,EAAD,OAEJzM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACwM,EAAD,MACA1M,EAAAC,EAAAC,cAACyM,EAAD,CAAczN,KAAOF,KAAKC,MAAMC,KAAMmG,WAAcrG,KAAKC,MAAMiF,MAAMoI,OAAOhL,KAC5EtB,EAAAC,EAAAC,cAAC0M,EAAD,CAAc1N,KAAOF,KAAKC,MAAMC,KAAMmG,WAAcrG,KAAKC,MAAMiF,MAAMoI,OAAOhL,eA7C5EZ,aA+ETE,cACXC,4BACAC,IAAWC,YAVS,SAAC2C,GACrB,MAAO,CACHxE,KAAMwE,EAAM/D,SAAST,OAfF,SAACqC,GACxB,MAAO,CACHgL,aAAc,WACVhL,ECvDR,SAACA,EAAUC,EAAUC,GACjB,IAAM9B,EAAW8B,IACbE,EAAOhC,EAAST,OAAO2N,YAC3B,GAAIlL,EAAM,CACN,IAAItC,EAAMsC,EAAKtC,IACfM,EAAS0C,OAAT,SAAA3C,OAAyBL,EAAzB,WAAuC,CAAEqH,QAAQ,IAC7B/G,EAASkC,WAAWC,IAApB,SAAApC,OAAiCL,EAAjC,YACNyN,eAAeC,IAAI,CAC7BrG,QAAQ,EACRE,WAAYjH,EAASkC,SAASmL,YAAYC,gBDgDlDZ,UAAW,WACP9K,EC1ER,SAACA,EAAUC,EAAUC,GACjB,IAAM9B,EAAW8B,IACjB9B,EAAST,OAAOwC,mBAAmB,SAAUC,GACzC,GAAIA,EAAM,CACN,IAAItC,EAAMsC,EAAKtC,IACfM,EAAS0C,OAAT,SAAA3C,OAAyBL,EAAzB,WAAuC,CAAEqH,QAAQ,IAC7B/G,EAASkC,WAAWC,IAApB,SAAApC,OAAiCL,EAAjC,YACNyN,eAAeC,IAAI,CAC7BrG,QAAQ,EACRE,WAAYjH,EAASkC,SAASmL,YAAYC,kBDmEtD5L,oBAAqB,SAAChC,GAClBkC,EAASF,EAAoBhC,QAY1BuB,CAGbuL,qBEzFIe,mLAEF,OACElN,EAAAC,EAAAC,cAACiN,EAAA,EAAD,KACEnN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CAAOC,OAAK,EAAC/G,KAAK,IAAIgH,UAAWxO,IACjCkB,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CAAOC,OAAK,EAAC/G,KAAK,iBAAiBgH,UAAWnB,aANtCzL,aAcH6M,yBAAaL,GCRRM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzJ,MACvB,wECjBA0J,GAAe,GAeNjK,GAdK,WAAkC,IAAjCD,EAAiCmK,UAAA9F,OAAA,QAAA+F,IAAAD,UAAA,GAAAA,UAAA,GAAzBD,GAAcG,EAAWF,UAAA9F,OAAA,EAAA8F,UAAA,QAAAC,EAClD,OAAQC,EAAOjO,MACX,IZJgB,WYMZ,MAAO,CACHT,IAFyC0O,EAArC1O,IAGJ6B,YAHyC6M,EAAjC7M,YAIRC,UAJyC4M,EAApB5M,UAKrBC,KALyC2M,EAAT3M,MAOxC,QACI,OAAOsC,ICJJsK,GAJKC,YAAgB,CAChCtO,SAAUuO,kBACVvK,iBCAEwK,GAAiB,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,gBAGjBC,GAAS,CACXC,YAAa,QACbC,mBAAmB,EACnBC,kBAAmB,YCPvB,IACMC,GDYS,WAA2CjB,UAAA9F,OAAA,QAAA+F,IAAAD,UAAA,IAAAA,UAAA,GACtDlO,IAASoP,cAAcZ,IAEvB,IAKMW,EAJFlO,YAAQoO,6BAAmBrP,IAAU+O,IACjCO,YAAgBC,IAAMC,kBAAkB1N,gBAD5Cb,CAEEwO,IAEQC,CAAwBrB,IAItC,OAHAc,EAAMQ,oBAAoBtN,KAAK,WAC3B7C,QAAQC,IAAI,qBAET0P,ECxBGS,CADO9B,OAAO+B,mBAG5BC,IAASC,OACL1P,EAAAC,EAAAC,cAACyP,EAAA,EAAD,CAAUb,MAAOA,IACb9O,EAAAC,EAAAC,cAAC0P,EAAD,OACSC,SAASC,eAAe,SJ+GnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjO,KAAK,SAAAkO,GACjCA,EAAaC","file":"static/js/main.0c1246cd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { firebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase'\r\nimport GoogleButton from 'react-google-button';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nclass LoginPage extends Component {\r\n  componentDidUpdate() {\r\n    if (!isEmpty(this.props.auth)) {\r\n      console.log(this.props.auth.uid); \r\n      localStorage.setItem('logged in',\"true\");     \r\n      this.props.history.push(`/messenger/${this.props.auth.uid}`);\r\n    }\r\n  }\r\n  async handleLogIn(){\r\n    await this.props.firebase.login({ provider: 'google', type: 'popup' });\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\" style={{width: '15%'}}>\r\n          <div style={{margin: '100px auto'}} >\r\n          <GoogleButton onClick={() => this.handleLogIn()} />\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nLoginPage.propTypes = {\r\n  firebase: PropTypes.shape({\r\n    login: PropTypes.func.isRequired\r\n  }),\r\n  auth: PropTypes.object,\r\n}\r\nexport default compose(\r\n  firebaseConnect(),withRouter,\r\n  connect(({ firebase: { auth } }) => ({ auth }))\r\n)(LoginPage)","import * as types from '../Actions/ActionType'\r\nimport { firebaseConnect } from 'react-redux-firebase'\r\nimport firebase from 'firebase'\r\nexport const getUser = ({ uid, displayName, avatarUrl, star }) => {\r\n    return {\r\n        type: types.GET_USER,\r\n        uid,\r\n        displayName,\r\n        avatarUrl,\r\n        star\r\n    }\r\n}\r\n\r\nexport const getUserFromFirebase = (id) =>\r\n    (dispatch, getState, getFirebase) => {\r\n        const firebase = getFirebase()\r\n\r\n        firebase.auth().onAuthStateChanged(function (user) {\r\n            if (user) {\r\n                let uid = user.uid\r\n                let priority = {}\r\n\r\n                firebase.database().ref(`users/${uid}/priority/${id}`).once('value').then(function (snapshot) {\r\n                    console.log(snapshot.val())\r\n                    if (snapshot.val()) {\r\n                        priority.isStar = snapshot.val().isStar;\r\n                        const star = snapshot.val().isStar\r\n                        // priority.lastChat = snapshot.val().lastChat;\r\n                        firebase.database().ref(`users/${id}`).once('value').then(function (snapshot) {\r\n                            console.log(snapshot.val())\r\n                            const { displayName, avatarUrl } = snapshot.val();\r\n                            let uid = id\r\n                            dispatch(getUser({ uid, displayName, avatarUrl, star }))\r\n                        });\r\n                    }\r\n                    else {\r\n                        firebase.update(`users/${uid}/priority/${id}`, {idChatWith: `${id}`,isStar: false, lastChat: 0 });\r\n                        firebase.database().ref(`users/${uid}/priority/${id}`).once('value').then(function (snapshot) {\r\n                             priority.isStar = snapshot.val().isStar;\r\n                            const star = snapshot.val().isStar\r\n                            // priority.lastChat = snapshot.val().lastChat;\r\n                            firebase.database().ref(`users/${id}`).once('value').then(function (snapshot) {\r\n                                console.log(snapshot.val())\r\n                                const { displayName, avatarUrl } = snapshot.val();\r\n                                let uid = id\r\n                                dispatch(getUser({ uid, displayName, avatarUrl, star }))\r\n                            });\r\n                        })\r\n                     \r\n                    }\r\n\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n\r\nexport const updateLastChatUser = (id) =>\r\n    (dispatch, getState, getFirebase) => {\r\n        const firebase = getFirebase()\r\n        firebase.auth().onAuthStateChanged(function (user) {\r\n            if (user) {\r\n                let uid = user.uid;\r\n                firebase.update(`users/${uid}/priority/${id.idReceiver}`, { lastChat: Date.now() })\r\n                firebase.update(`users/${id.idReceiver}/priority/${uid}`, { lastChat: Date.now() })\r\n            }\r\n        })\r\n    }\r\nexport const updateStarUser = (item) =>\r\n    (dispatch, getState, getFirebase) => {\r\n        const firebase = getFirebase()\r\n        let updateStar = firebase.database().ref(`users/${item.idAuth}/priority/${item.idChatWith}`);\r\n        updateStar.update({\r\n            isStar: item.star,\r\n        })\r\n    }","export const GET_USER = 'GET_USER';","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {updateStarUser,getUserFromFirebase} from '../../store/Actions/user';\r\nimport {firebaseConnect} from 'react-redux-firebase';\r\nimport {compose} from 'redux';\r\nclass ChatHeader extends Component {\r\n    onClick = async(star) => {\r\n        const item = {\r\n            star: !star,\r\n            idAuth: this.props.auth.uid,\r\n            idChatWith: this.props.chatHeader.uid\r\n        }\r\n        await this.props.updateStarUser(item);\r\n        this.props.getUserFromFirebase(item.idChatWith);\r\n    }\r\n    render() {\r\n        console.log(this.props.chatHeader)\r\n        let starClass = 'fa fa-star uncheck';\r\n        if(this.props.chatHeader.star){\r\n            starClass = \"fa fa-star check\"\r\n        }\r\n        return (\r\n            \r\n            <div className=\"chat-header clearfix\">\r\n                <img src={this.props.chatHeader.avatarUrl} width = '40px' height = '40px' alt=\"avatar\" />\r\n                <div className=\"chat-about\">\r\n                    <div className=\"chat-with\">Chat with {this.props.chatHeader.displayName}</div>\r\n                    \r\n                </div>\r\n                <i className={starClass} onClick={() =>this.onClick(this.props.chatHeader.star)}></i>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateStarUser: (item) => {\r\n            dispatch(updateStarUser(item))\r\n        },\r\n        getUserFromFirebase: (id) => {\r\n            dispatch(getUserFromFirebase(id))\r\n        }\r\n    }\r\n};\r\nconst mapStateToProps = (state) => {\r\n    // console.log(state.userReducer);\r\n    return {\r\n        chatHeader: state.userReducer,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\nexport default compose(firebaseConnect(),connect(mapStateToProps, mapDispatchToProps))(ChatHeader);","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { firebaseConnect } from 'react-redux-firebase';\r\nclass Message extends Component {\r\n\r\n    render() {\r\n        // console.log(this.props.message);\r\n        // console.log(`chat with ${this.props.chatHeader.displayName}`)\r\n        const { message } = this.props;\r\n        const { auth } = this.props;\r\n        //let day = moment(message.time);\r\n        // let time = moment(day.toDate()).calendar();\r\n        let time = moment().format('LT');\r\n        let parts = message.message.match(/(https?|ftp:)([^\\s]+)/g);\r\n        let links = null;\r\n        if (parts) {\r\n            links = parts.map((link, index) => {\r\n                return (\r\n                    <img src={link} key={index} />\r\n                )\r\n            })\r\n        }\r\n        let imgUrls = message.imgUrl;\r\n        let imgs = null;\r\n        if (imgUrls) {\r\n            imgs = imgUrls.map((imgUrl, index) => {\r\n                return (\r\n                    <img src={imgUrl} key={index} />\r\n                )\r\n            })\r\n        }\r\n\r\n        // console.log(parts);\r\n        if (message.liClass) {\r\n            return (\r\n                <li className={message.liClass}>\r\n                    <div className=\"message-data align-right\">\r\n                        <span className=\"message-data-time\" >{time}</span> &nbsp; &nbsp;\r\n                            <span className=\"message-data-name\" >{auth.displayName} </span>\r\n                        <i className=\"fa fa-circle me\"></i>\r\n                    </div>\r\n                    <div className=\"message my-message float-right\">\r\n                        {message.message}\r\n                        {imgs}\r\n                        {links}\r\n                    </div>\r\n                </li>\r\n            )\r\n        } else {\r\n            return (\r\n                <li>\r\n                    <div className=\"message-data align-left\">\r\n                        <img src={this.props.chatHeader.avatarUrl} alt=\"avatar\" className=\"float-left mr-2\" />\r\n                        <span className=\"message-data-name\">\r\n                            {this.props.chatHeader.displayName}\r\n                        </span>\r\n                        <span className=\"message-data-time\">{time}</span>&nbsp; &nbsp;\r\n                    </div>\r\n                    <div className=\"message other-message float-left\">\r\n                        {message.message}\r\n                        {imgs}\r\n                        {links}\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chatHeader: state.userReducer,\r\n        //user: state.user,\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Message);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { firebaseConnect } from 'react-redux-firebase';\r\nimport _ from 'lodash';\r\nimport Message from './Message';\r\nclass ChatHistory extends Component {\r\n    scrollToBottom = () => {\r\n        this.endChat.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.scrollToBottom();\r\n        \r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        this.scrollToBottom();\r\n        \r\n    }\r\n    \r\n    \r\n    render() {\r\n        // console.log(_.values(this.props.messages));\r\n        // console.log(this.props.messages);\r\n\r\n        // console.log(this.props.idSender);\r\n        // console.log(this.props.idReceiver);\r\n        const auth = this.props.auth;\r\n\r\n        const idSender = auth.uid;\r\n        const idReceiver = this.props.idReceiver;\r\n        const idMessage = (idSender < idReceiver) ? (idSender + idReceiver) : (idReceiver + idSender);\r\n        //console.log(idMessage)\r\n        let idx = -1;\r\n        _.values(this.props.messages).forEach((mess, index) => {\r\n            //console.log(_.values(mess)[0].idMessage)\r\n            if (idMessage === _.values(mess)[0].idMessage) {\r\n                idx = index;\r\n            }\r\n        })\r\n\r\n        const chat = _.values(_.values(this.props.messages)[idx]);\r\n        //console.log(chat)\r\n        let list = null;\r\n        if (chat) {\r\n            list = chat.map((message, index) => {\r\n                let liClass = null;\r\n                if (message.idSender === idSender) {\r\n                    liClass = \"clearfix\";\r\n                }\r\n                message.liClass = liClass;\r\n                return (\r\n                    <Message key={index} message={message} auth={auth} />\r\n                )\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div className=\"chat-history\">\r\n                <ul>\r\n                    {list}\r\n                </ul>\r\n                <div style={{ float: \"left\", clear: \"both\" }} ref={(e) => { this.endChat = e; }}>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    messages: state.firebase.data.messages,\r\n})\r\nexport default compose(firebaseConnect(['messages']), connect(mapStateToProps))(ChatHistory)","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport { getUser, getUserFromFirebase } from '../../store/Actions/user';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nclass User extends Component {\r\n    onHandleOnClickUser = (uid) => {\r\n        this.props.getUserFromFirebase(uid);\r\n        let path = `/messenger/${uid}`;\r\n        this.props.history.push(path);\r\n    }\r\n    render() {\r\n        let { user } = this.props;\r\n        let desc = '';\r\n        let status = '';\r\n        if (user.value.status.online) {\r\n            desc = 'online';\r\n            status = <i className=\"fa fa-circle online\"></i>\r\n        }\r\n        else {\r\n            let day = moment(user.value.status.lastOnline);\r\n            let lastOnline = moment(day.toDate()).calendar();\r\n            desc = `${lastOnline}`;\r\n            status = <i className=\"fa fa-circle offline\"></i>\r\n            \r\n        }\r\n        return (\r\n            <li className=\"clearfix\">\r\n                <img src={user.value.avatarUrl} alt=\"avatar\" />\r\n                <div className=\"about\">\r\n                    <div className=\"name\" onClick={() => this.onHandleOnClickUser(user.key)}>{user.value.displayName}</div>\r\n                    <div className=\"status\">\r\n                        {/* <i className={user.online ? \"fa fa-circle online\" : \"fa fa-circle offline\"}></i> */}\r\n                        {status}\r\n                        {desc}\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getUserFromFirebase: (uid) => {\r\n            dispatch(getUserFromFirebase(uid))\r\n        }\r\n    }\r\n};\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chatHeader: state.userReducer\r\n    }\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(User));\r\n","import React, { Component } from 'react';\r\nimport User from './User';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { firebaseConnect } from 'react-redux-firebase';\r\nimport _ from 'lodash'\r\nclass ListUser extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            keyword: ''\r\n        }\r\n    }\r\n    onChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let users = this.props.users;\r\n        // let priority =  users.find(this.props.uid);\r\n        const idCurrent = this.props.uid;\r\n        const index = _.findIndex(users, { 'key': idCurrent })\r\n        let priority = null;\r\n        if (index !== -1) {\r\n            priority = _.values(users[index].value.priority);\r\n            for (let i = 0; i < users.length; i++) {\r\n                for (let j = 0; j < priority.length; j++) {\r\n                    if (users[i].key === priority[j].idChatWith) {\r\n                        users[i].star = priority[j].isStar;\r\n                        users[i].lastChat = priority[j].lastChat;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let online = [];\r\n        let offline = [];\r\n        if (users) {\r\n            for (let i = 0; i < users.length; i++) {\r\n                users[i].starScore = users[i].star ? 100 * (new Date()) : 1;\r\n                users[i].timeScore = users[i].lastChat ? users[i].lastChat : 1;\r\n                if (users[i].value.status.online) {\r\n                    online.push(users[i])\r\n                } else {\r\n                    offline.push(users[i])\r\n                }\r\n            }\r\n        }\r\n\r\n        online.sort((a, b) => {\r\n            return ((b.starScore * b.timeScore) - (a.starScore * a.timeScore))\r\n        })\r\n        offline.sort((a, b) => {\r\n            return ((b.starScore * b.timeScore) - (a.starScore * a.timeScore))\r\n        })\r\n\r\n        users = online.concat(offline);\r\n        console.log(users);\r\n        let listUsers = '';\r\n        if (users) {\r\n            console.log(users);\r\n            if (this.state.keyword !== \"\") {\r\n                users = users.filter((user) => {\r\n                    return user.value.displayName.toLowerCase().indexOf(this.state.keyword.toLowerCase()) !== -1;\r\n                })\r\n            }\r\n\r\n            listUsers = users.map((user, index) => {\r\n                return (\r\n                    <User\r\n                        key={index}\r\n                        user={user} />\r\n                )\r\n            })\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"search\">\r\n                    <input type=\"text\" name=\"keyword\" value={this.state.keyword} onChange={this.onChange} placeholder=\"search\" />\r\n                    <i className=\"fa fa-search\"></i>\r\n                </div>\r\n                <ul className=\"list\">\r\n                    {listUsers}\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n    uid: state.firebase.auth.uid,\r\n    users: state.firebase.ordered.users,\r\n})\r\n\r\nexport default compose(firebaseConnect(['users']), connect(mapStateToProps))(ListUser)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessage } from '../../store/Actions/message'\r\nimport { updateLastChatUser } from '../../store/Actions/user'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faImage } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nlibrary.add(faImage)\r\nclass MessageInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            listImages: [],\r\n            previewImage: [],\r\n        }\r\n    }\r\n    onChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n    onHandleChooseImage = (e) => {\r\n        let image = e.target.files[0];\r\n\r\n        let reader = new FileReader()\r\n        reader.onloadend = () => {\r\n            if (image) {\r\n                this.setState({\r\n                    previewImage: [...this.state.previewImage, reader.result],\r\n                    listImages: [...this.state.listImages, image],\r\n                })\r\n            }\r\n        }\r\n        reader.readAsDataURL(image);\r\n        e.target.value = null;\r\n    }\r\n    onHanleKey = (e) => {\r\n        if (e.keyCode === 13) {\r\n            this.onSubmit(e);\r\n        }\r\n        if (e.keyCode === 16 && e.keyCode === 13) {\r\n            let str = this.state.message + '\\n';\r\n            this.setState({ message: str });\r\n        }\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const idSender = this.props.auth.uid;\r\n        const idReceiver = this.props.idReceiver;\r\n        const idMessage = (idSender < idReceiver) ? (idSender + idReceiver) : (idReceiver + idSender);\r\n        if (this.state.message !== '' || this.state.listImages.length !== 0) {\r\n            const item = {\r\n                message: this.state.message,\r\n                idSender: idSender,\r\n                idReceiver: idReceiver,\r\n                idMessage: idMessage,\r\n                time: Date.now(),\r\n                listImgs: this.state.listImages,\r\n            }\r\n            const id = {\r\n                idSender: idSender,\r\n                idReceiver: idReceiver,\r\n            }\r\n            // console.log(item);\r\n            this.props.sendMessage(item);\r\n            this.props.updateLastChatUser(id);\r\n            this.setState({\r\n                message: '',\r\n                listImages: [],\r\n                previewImage: [],\r\n            })\r\n            e.target.value = null;\r\n        }\r\n\r\n    }\r\n    onDelete = (index) => {\r\n        let preImgs = this.state.previewImage;\r\n        preImgs.splice(index, 1);\r\n        let listImgs = this.state.listImages;\r\n        listImgs.splice(index, 1);\r\n        this.setState({\r\n            previewImage: preImgs,\r\n            listImages: listImgs,\r\n        })\r\n        console.log(this.state.listImages);\r\n    }\r\n    render() {\r\n\r\n        // console.log(this.state.previewImage);\r\n        // console.log(this.state.listImages);\r\n        let listPreviewImgs = this.state.previewImage;\r\n        let listPreImgs = null;\r\n        if (listPreviewImgs.length > 0) {\r\n            listPreImgs = listPreviewImgs.map((preImg, index) => {\r\n                return (\r\n                    <div key={index} className=\"previewImages\">\r\n                        <div className=\"Image\">\r\n                            <button onClick={() => this.onDelete(index)} style={{ color: \"red\" }}>x</button>\r\n                            <img src={preImg} />\r\n                        </div>\r\n                    </div>\r\n\r\n                )\r\n            })\r\n        }\r\n        return (\r\n            <div className=\"chat-message clearfix\">\r\n                <textarea name=\"message\" value={this.state.message} onChange={this.onChange} onKeyDown={this.onHanleKey} id=\"message-to-send\" placeholder=\"Type your message\" rows=\"3\"></textarea>\r\n                <i className=\"fa fa-file-o\"></i> &nbsp;&nbsp;&nbsp;\r\n                {/* <i className=\"fa fa-file-image-o\"></i> */}\r\n\r\n                <div className=\"uploadImage\" >\r\n                    <label htmlFor=\"file\">\r\n                        <FontAwesomeIcon icon=\"image\" size=\"2x\" />\r\n                    </label>\r\n                    <input type=\"file\" id=\"file\" accept=\"image/*\" ref=\"fileUploader\" onChange={(e) => this.onHandleChooseImage(e)} />\r\n                </div>\r\n                {listPreImgs}\r\n                <button onClick={this.onSubmit} >Send</button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (message) => dispatch(sendMessage(message)),\r\n        updateLastChatUser: (id) => dispatch(updateLastChatUser(id))\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageInput);","export const sendMessage = (message) =>\r\n    (dispatch, getState, getFirebase) => {\r\n        console.log(message)\r\n\r\n        const firebase = getFirebase()\r\n        let add = firebase.database().ref(`messages`);\r\n\r\n        if (message.listImgs.length > 0) {\r\n            let file = message.listImgs;\r\n            let metadata = {\r\n                contentType: 'image/*'\r\n            };\r\n            // Upload file and metadata to the object 'images/mountains.jpg'\r\n            let storageRef = firebase.storage().ref();\r\n            let promises = [];\r\n            file.forEach(element => {\r\n                promises.push(storageRef.child(`images/${element.lastModified}${element.name}`).put(element, metadata));\r\n            });\r\n            Promise.all(promises).then(res => {\r\n                promises = [];\r\n                res.forEach(element => {\r\n                    promises.push(element.ref.getDownloadURL());\r\n                });\r\n                Promise.all(promises).then((imgURLs) => {\r\n                    console.log(imgURLs);\r\n                    message.imgUrl = imgURLs;\r\n                    add.child(message.idMessage).push(message);\r\n                })\r\n\r\n            });\r\n\r\n        }\r\n        else {\r\n            add.child(message.idMessage).push(message);\r\n        }\r\n\r\n        // let uploadTask = storageRef.child('images/' + file.name).put(file, metadata);\r\n        // uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n        //     console.log('File available at', downloadURL);\r\n        // });\r\n\r\n\r\n        // firebase.update(`messages/${message.idMessage}`, message);\r\n        // firebase.set()\r\n        // firebase.auth().onAuthStateChanged(function (user) {\r\n        //     if (user) {\r\n        //         let uid = user.uid;\r\n        //         firebase.update(`users/${uid}/status`, { online: true })\r\n        //         let lastOnlineRef = firebase.database().ref(`users/${uid}/status`);\r\n        //         lastOnlineRef.onDisconnect().set({\r\n        //             online: false,\r\n        //             lastOnline: firebase.database.ServerValue.TIMESTAMP,\r\n        //         })\r\n        //     }\r\n        // })\r\n    }","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { firebaseConnect, isEmpty, getFirebase } from 'react-redux-firebase';\r\nimport '../../style/messenger.scss';\r\nimport ChatHeader from './ChatHeader';\r\nimport ChatHistory from './ChatHistory';\r\nimport ListUsers from './ListUser';\r\nimport MessageInput from './MessageInput';\r\nimport { logOut, setStatus } from '../../store/Actions/auth';\r\nimport { getUserFromFirebase } from '../../store/Actions/user';\r\nimport { withRouter } from 'react-router-dom';\r\nclass Messenger extends Component {\r\n\r\n    componentWillReceiveProps() {\r\n        if (localStorage.getItem(\"logged in\") !== 'true') {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        //console.log(this.props.auth);\r\n        if (localStorage.getItem(\"logged in\") === 'false') {\r\n            this.props.history.push('/');\r\n        }\r\n        else {\r\n            this.props.setStatus();\r\n            this.props.getUserFromFirebase(this.props.match.params.id);\r\n        }\r\n    }\r\n    \r\n    handleLogOut() {\r\n        this.props.handleLogOut();\r\n        this.props.firebase.logout();\r\n        localStorage.setItem(\"logged in\", \"false\");\r\n    }\r\n    render() {\r\n        // console.log('render');\r\n        // console.log(this.props.auth.displayName);\r\n        \r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h2 style={{ color: 'Black' }}>Messenger</h2>\r\n                    <h3 style={{ color: 'Black' }}>Hello, {this.props.auth.displayName}</h3>\r\n                    {/* <h3 style={{ color: 'Black' }}>Hello, {this.props.auth.uid}</h3> */}\r\n                </div>\r\n                <div className=\"container clearfix\">\r\n                    <button className=\"float-right\" style={{ height: '40px', width: '40px' }} onClick={() => this.handleLogOut()} >\r\n                        <i className=\"fas fa-sign-out-alt\"></i>\r\n                    </button>\r\n                    <div className=\"people-list\" id=\"people-list\">\r\n                  \r\n                        <ListUsers />\r\n                    </div>\r\n                    <div className=\"chat\">\r\n                        <ChatHeader />\r\n                        <ChatHistory  auth= {this.props.auth} idReceiver = {this.props.match.params.id}/>\r\n                        <MessageInput auth= {this.props.auth} idReceiver = {this.props.match.params.id} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nMessenger.propTypes = {\r\n    firebase: PropTypes.shape({\r\n        logout: PropTypes.func.isRequired\r\n    }),\r\n    auth: PropTypes.object,\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleLogOut: () => {\r\n            dispatch(logOut())\r\n        },\r\n        setStatus: () => {\r\n            dispatch(setStatus())\r\n        },\r\n        getUserFromFirebase: (uid) => {\r\n            dispatch(getUserFromFirebase(uid))\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth,\r\n        // users: state.firebase.ordered.users,\r\n    }\r\n};\r\n\r\n\r\nexport default compose(\r\n    firebaseConnect(), // withFirebase can also be used\r\n    withRouter,connect(mapStateToProps, mapDispatchToProps)\r\n)(Messenger);\r\n","import './ActionType';\r\n\r\nexport const setStatus = () =>\r\n    (dispatch, getState, getFirebase) => {\r\n        const firebase = getFirebase()\r\n        firebase.auth().onAuthStateChanged(function (user) {\r\n            if (user) {\r\n                let uid = user.uid;\r\n                firebase.update(`users/${uid}/status`, { online: true })\r\n                let lastOnlineRef = firebase.database().ref(`users/${uid}/status`);\r\n                lastOnlineRef.onDisconnect().set({\r\n                    online: false,\r\n                    lastOnline: firebase.database.ServerValue.TIMESTAMP,\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\nexport const logOut = () =>\r\n    (dispatch, getState, getFirebase) => {\r\n        const firebase = getFirebase()\r\n        let user = firebase.auth().currentUser;\r\n        if (user) {\r\n            let uid = user.uid;\r\n            firebase.update(`users/${uid}/status`, { online: false })\r\n            let lastOnlineRef = firebase.database().ref(`users/${uid}/status`);\r\n            lastOnlineRef.onDisconnect().set({\r\n                online: false,\r\n                lastOnline: firebase.database.ServerValue.TIMESTAMP,\r\n            })\r\n        }\r\n    }","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { withFirebase } from 'react-redux-firebase';\r\nimport LoginPage from './components/Login/LoginPage';\r\nimport Messenger from './components/Messenger/Messenger'\r\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Route exact path=\"/\" component={LoginPage} />\r\n          <Route exact path=\"/messenger/:id\" component={Messenger} />\r\n        </div>\r\n      </Router>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default withFirebase(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as types from '../Actions/ActionType'\r\nconst initialState = [];\r\nconst userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.GET_USER:\r\n            const { uid,displayName, avatarUrl, star } = action;\r\n            return {\r\n                uid,\r\n                displayName,\r\n                avatarUrl,\r\n                star\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default userReducer;","//import authReducer from './authReducer';\r\nimport {combineReducers} from 'redux';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\nimport userReducer from './user';\r\n\r\nconst rootReducer = combineReducers({\r\n    firebase: firebaseReducer,\r\n    userReducer,\r\n});\r\nexport default rootReducer;","//import 'firebase/auth';\r\nimport {compose,applyMiddleware,createStore } from 'redux'\r\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\r\nimport firebase from 'firebase';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../store/reducers/rootReducer'\r\n// Initialize Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCWtWsilJYv7G0h0X9m_bBWBXA5yVqkS4w\",\r\n    authDomain: \"chatapp-1512189.firebaseapp.com\",\r\n    databaseURL: \"https://chatapp-1512189.firebaseio.com\",\r\n    projectId: \"chatapp-1512189\",\r\n    storageBucket: \"chatapp-1512189.appspot.com\",\r\n    messagingSenderId: \"305899554852\"\r\n};\r\n// react-redux-firebase options\r\nconst config = {\r\n    userProfile: 'users', // firebase root where user profiles are stored\r\n    attachAuthIsReady: true, // attaches auth is ready promise to store\r\n    firebaseStateName: 'firebase' // should match the reducer name ('firebase' is default)    \r\n}\r\n\r\n\r\n// Create store with reducers and initial state\r\n\r\nexport default function configureStore (initialState = {}){\r\n    firebase.initializeApp(firebaseConfig)\r\n\r\n    const createStoreWithFirebase =\r\n        compose(reactReduxFirebase(firebase, config),\r\n            applyMiddleware(thunk.withExtraArgument(getFirebase))\r\n        )(createStore)\r\n\r\n    const store = createStoreWithFirebase(rootReducer);\r\n    store.firebaseAuthIsReady.then(() => {\r\n        console.log('Auth has loaded') // eslint-disable-line no-console\r\n      })\r\n    return store;\r\n}   ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from './config/fbConfig';\r\n//import { applyMiddleware, combineReducers, compose  } from 'redux';\r\nimport { reactReduxFirebase, firebaseReducer } from 'react-redux-firebase';\r\n// import thunk from 'redux-thunk';\r\n// import firebase from 'firebase';\r\n\r\nconst initialState = window.__INITIAL_STATE__ // set initial state here\r\nconst store = configureStore(initialState)\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}